/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package microphonevisualizer;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.BorderFactory;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.List;

import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioSystem;

import javax.sound.sampled.DataLine;

import javax.sound.sampled.LineUnavailableException;

import javax.sound.sampled.TargetDataLine;
import javax.swing.Timer;

/**
 *
 * @author maryan
 */
public class WaveDrawing extends JFrame {
    
    /**
     * Creates new form WaveDrawing
     */
    public WaveDrawing() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }

    private static void createAndShowGUI() {
        JFrame f = new JFrame("Swing Paint");
        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        MyPanel obj = new MyPanel();
        f.add(obj);

        f.pack();
        f.setVisible(true);

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}

class MyPanel extends JPanel implements ActionListener {
    
    public static final double threshold = 3.0;
    public static int count = 0;
    private short d;
    public double rms;
    public double db;
    public TargetDataLine line;
    public int sumOfSquares;
    
//    Timer timer;
    List <Points> points;
    
    public double scaler = Short.MAX_VALUE / (double) 150;
    
    public MyPanel() {
        setBorder(BorderFactory.createLineBorder(Color.black));
//        timer = new Timer(0, this);
        points = new ArrayList<>();
//        
//        timer.start();
        try {

            AudioFormat format = new AudioFormat(8000.0f, 16, 1, true, true);
            line = AudioSystem.getTargetDataLine(format);

            DataLine.Info info = new DataLine.Info(TargetDataLine.class, format);
            if (!AudioSystem.isLineSupported(info)) {

                System.out.println("error");
            }

            try {
                line = (TargetDataLine) AudioSystem.getLine(info);
                line.open(format);
            } catch (LineUnavailableException ex) {
                System.out.println("error");
            }

            line.start();

        } catch (LineUnavailableException ex) {
            System.out.println("error");
        }
    }
    
    

    public void readData() {

        int numBytesRead = 16;

        byte[] data = new byte[numBytesRead];

        line.read(data, 0, numBytesRead);
        ByteBuffer bb = ByteBuffer.wrap(data);
        d = bb.getShort();
        
    }
    
    private short getShortData() {
        int numBytesRead = 16;
        byte[] data = new byte[numBytesRead];

        line.read(data, 0, numBytesRead);
        ByteBuffer bb = ByteBuffer.wrap(data);
        return bb.getShort();
    }
    
    public short[] getShortArray() {
        float sRate = 8000.0f;
        int seconds = 5;
        int len = (int) (sRate * seconds);
        short[] data = new short[len];
        for(int i = 0; i < len; i++) {
            data[i] = getShortData();
            
        }
        System.out.println("close");
        line.stop();
        line.close();
        return data;
    }
    
    public short[] scaledData() {
        int windowLenght = 800;
        int seconds = 5;
        float sRate = 8000.0f;
        short[] data = getShortArray();
        int pointsScaler = (int) (sRate / (windowLenght / seconds));
        short[] scaledData = new short[windowLenght + 1];
        int j = 0;
        int sum = 0;

        for(int i = 0; i < data.length; i++) {

            sum += data[i];
            if (i % pointsScaler == 0) {
                scaledData[j] = (short) (sum / pointsScaler);
                j++;
                sum = 0;
            }
        }

        return scaledData;
    }
    
    public void pointsGenerate() {
        short[] scaledData = scaledData();
        
        Points p;
        for(int i = 0; i < 800; i++) {
            if ( points.isEmpty() ) {
                p = new Points(800, 200, 800, 200 - (int) (scaledData[i] / scaler), Color.black);
                points.add(p); 
            }  else {
                int i2 = points.get(points.size() - 1).j2;
                p = new Points(800, i2, 800, 200 - (int) (scaledData[i] / scaler), Color.black);
        
                points.add(p);
            }
        }
        
    }
    public Dimension getPreferredSize() {
        return new Dimension(800, 400);
    }

    public void paint(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D) g;
        pointsGenerate();
        

        for(Points p: points) {

            g2.setColor(p.col);
            g2.drawLine(p.i1, p.i2, p.j1, p.j2);
        }
       
    }

    @Override
    public void actionPerformed(ActionEvent ae) {
        System.out.println("1");
/*        readData();
        Points p;
        Color  c;
        
        if (count < 100) { 
            count++;
            sumOfSquares += Math.pow(Math.abs((int) (d / scaler)), 2);
            rms = Math.sqrt(sumOfSquares / count);
        } else {
//            rms = Math.sqrt(sumOfSquares / count);
            count = 0;
            sumOfSquares = 0;
        }
               
        for(Points p1: points) {
            p1.i1 = p1.i1 - 1;
            p1.j1 = p1.j1 - 1;
        }
        dbCalculation();
        if (rms < threshold ) {
//        if (Math.abs(db)  > 36) {
            c = Color.red;
        } else {
            c = Color.black;
        }
        
        if ( points.isEmpty() ) {
            p = new Points(800, 200, 800, 200 - (int) (d / scaler), c);
            points.add(p); 
        }  else {
            int i2 = points.get(points.size() - 1).j2;
            p = new Points(800, i2, 800, 200 - (int) (d / scaler), c);
            points.add(p);

        }
        
        if (points.size() > 801) {
           points.remove(0);     
        }
         */


        repaint();
    }
    
    private void dbCalculation() {
        double amplitude;
        if (d > 0) {
            amplitude = d / (double) Short.MAX_VALUE;
        } else {
            amplitude = d / (double) Short.MIN_VALUE;
        }
        db = 20 * Math.log10((amplitude));
    }
}


class Points {
    public int i1;
    public int i2;
    public int j1;
    public int j2;
    public Color col;
    Points(int i1, int i2, int j1, int j2, Color c) {
        this.i1 = i1;
        this.i2 = i2;
        this.j1 = j1;
        this.j2 = j2;
        this.col = c;
    }
}